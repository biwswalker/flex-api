const User = function () {};
const TABLE = "users";
import knex from "knex";
import knexConfig from "../config/knexfile";
import { uploadFile } from "../services/uploadFile"; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô uploadFile
import { decryptAES256 } from "../utils/cryptoUtils"; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™
import { hashPassword } from "../utils/bcryptUtils"; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
import { generateAccessToken } from "../utils/jwtUtils"; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import nodemailer from "nodemailer";
import crypto from "crypto";
const url = process.env.API_UPLOAD;

const db = knex(knexConfig.development);

User.createUser = async (req: any, result: any) => {
  try {
    const { name, password, email, role, company_id } = req.body;

    const uploadfile = req.files.profile_image; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤

    // ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î
    const imageUrl = await uploadFile(uploadfile, TABLE);

    // // üîπ ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (AES-256)
    const decryptedPassword = decryptAES256(password);

    // // üîπ ‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB
    const hashedPassword = await hashPassword(decryptedPassword);

    // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const [newUser] = await db(TABLE)
      .insert({
        name,
        email,
        password: hashedPassword,
        role,
        image_url: imageUrl,
      })
      .returning("*");

    await db("user_company")
      .insert({
        user_id: newUser.id,
        company_id,
      })
      .returning("*");

    result(null, {
      success: true,
      code: 200,
      message: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: {
        ...(() => {
          const { password, ...rest } = newUser; // üîπ ‡∏•‡∏ö password
          return rest;
        })(),
        image_url: url + newUser.image_url,
      },
    });
  } catch (error: any) {
    return result(error, {
      success: false,
      code: 500,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      data: null,
    });
    throw new Error(error);
  }
};

User.getUser = async (req: any, result: any) => {
  try {
    const { email, role, company_ids, name } = req.query;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á API
    if (!["OWNER", "ADMIN"].includes(role)) {
      return result(null, {
        success: false,
        code: 403,
        message: "‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á",
        data: null,
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á query ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    let query = db("users").select(
      "users.id as user_id",
      "users.name",
      "users.email",
      "users.role",
      db.raw(`? || users.image_url as image_url`, [url]), // ‚úÖ ‡πÉ‡∏ä‡πâ `||` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PostgreSQL
      "users.created_at",
      "users.updated_at"
    );

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° request params
    let companies = JSON.parse(company_ids);
    if (companies && Array.isArray(companies)) {
      query.whereExists(function () {
        this.select("user_company.user_id")
          .from("user_company")
          .whereRaw("user_company.user_id = users.id")
          .whereIn("user_company.company_id", companies);
      });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const users = await query;

    return result(null, {
      success: true,
      code: 200,
      message: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: users,
    });
  } catch (error: any) {
    return result(error, {
      success: false,
      code: 500,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      data: null,
    });
    throw new Error(error);
  }
};

User.getUserById = async (req: any, result: any) => {
  try {
    const { id } = req.params;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const user = await db("users")
      .select(
        "id",
        "name",
        "email",
        "role",
        db.raw(`? || image_url as image_url`, [url]), // ‚úÖ ‡πÉ‡∏ä‡πâ `||` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PostgreSQL
        "created_at",
        "updated_at"
      )
      .where("id", id)
      .first();

    if (!user) {
      return result(null, {
        success: false,
        code: 404,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
        data: null,
      });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const companies = await db("user_company as uc")
      .join("company as c", "uc.company_id", "c.id")
      .where("uc.user_id", id)
      .select(
        "c.id",
        "c.name",
        "c.address",
        "c.sub_district",
        "c.district",
        "c.province",
        "c.postcode",
        "c.phone",
        "c.email",
        db.raw(`? || c.image_url as image_url`, [url]) // ‚úÖ ‡πÉ‡∏ä‡πâ `||` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PostgreSQL
      );

    return result(null, {
      success: true,
      code: 200,
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: { user, companies },
    });
  } catch (error: any) {
    return result(error, {
      success: false,
      code: 500,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      data: null,
    });
    throw new Error(error);
  }
};

User.updateUserById = async (req: any, result: any) => {
  try {
    const { id } = req.params;
    const { name, email, role, company_id } = req.body;

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const [updatedUser] = await db("users")
      .where("id", id)
      .update({
        name,
        email,
        role,
      })
      .returning("*");

    if (!updatedUser) {
      return result(null, {
        success: false,
        code: 404,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
        data: null,
      });
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    await db("user_company").where("user_id", id).update({
      company_id,
    });

    return result(null, {
      success: true,
      code: 200,
      message: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: updatedUser,
    });
  } catch (error: any) {
    return result(error, {
      success: false,
      code: 500,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      data: null,
    });
    throw new Error(error);
  }
};

User.deleteUserById = async (req: any, result: any) => {
  try {
    const { id } = req.params;

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const deletedUser = await db("users").where("id", id).del().returning("*");

    if (!deletedUser) {
      return result(null, {
        success: false,
        code: 404,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
        data: null,
      });
    }

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    await db("user_company").where("user_id", id).del();

    return result(null, {
      success: true,
      code: 200,
      message: "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: deletedUser,
    });
  } catch (error: any) {
    return result(error, {
      success: false,
      code: 500,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      data: null,
    });
    throw new Error(error);
  }
};

User.login = async (req: any, result: any) => {
  try {
    const { password } = req.headers;
    const { email } = req.body;

    if (!email || !password) {
      return result(null, {
        success: false,
        code: 400,
        message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
        data: null,
      });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const user = await db("users").where({ email }).first();
    if (!user) {
      return result(null, {
        success: false,
        code: 401,
        message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î",
        data: null,
      });
    }

    // ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ AES-256 ‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
    const decryptedPassword = decryptAES256(password);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏±‡∏ö hash ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const isMatch = await bcrypt.compare(decryptedPassword, user.password);
    if (!isMatch) {
      return result(null, {
        success: false,
        code: 401,
        message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î",
        data: null,
      });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
    const companies = await db("user_company as uc")
      .join("company as c", "uc.company_id", "=", "c.id")
      .where("uc.user_id", user.id)
      .select(
        "c.id",
        "c.name",
        "c.address",
        "c.sub_district",
        "c.district",
        "c.province",
        "c.postcode",
        "c.phone",
        "c.email",
        db.raw(`? || c.image_url as image_url`, [url]) // ‚úÖ ‡πÉ‡∏ä‡πâ `||` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PostgreSQL
      );

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á access token
    const token = generateAccessToken(
      { id: user.id, email: user.email, role: user.role },
      { expiresIn: "24h" }
    );

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á client
    result(null, {
      success: true,
      code: 200,
      message: "‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: {
        user: {
          ...(() => {
            const { password, created_at, updated_at, ...rest } = user; // üîπ ‡∏•‡∏ö password
            return rest;
          })(),
          image_url: url + user.image_url,
        },
        companies,
        access_token: token,
      },
    });
  } catch (error: any) {
    result(error, {
      success: false,
      code: 500,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      data: null,
    });
    throw new Error(error);
  }
};

User.forgotPassword = async (req: any, result: any) => {
  try {
    const { email } = req.body;

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const user = await db("users").where({ email }).first();
    if (!user) {
      return result(null, {
        success: false,
        code: 404,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
        data: null,
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á OTP
    const otp = crypto.randomInt(100000, 999999).toString();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á reference string
    const ref = crypto.randomBytes(3).toString("hex");

    // ‡πÄ‡∏Å‡πá‡∏ö OTP ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    await db("otp").insert({
      user_id: user.id,
      action: "reset_password",
      ref,
      otp,
    });

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ nodemailer
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "Reset Password OTP",
      text: `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ OTP ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô: ${otp}\nReference: ${ref}`,
    };

    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    await transporter.sendMail(mailOptions);

    return result(null, {
      success: true,
      code: 200,
      message: "OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô",
      data: null,
    });
  } catch (error: any) {
    return result(error, {
      success: false,
      code: 500,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      data: null,
    });
    throw new Error(error);
  }
};

User.resetPassword = async (req: any, result: any) => {
  try {
    const { email, otp, ref, password } = req.body;

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const user = await db("users").where({ email }).first();
    if (!user) {
      return result(null, {
        success: false,
        code: 404,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
        data: null,
      });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ OTP ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const otpRecord = await db("otp")
      .where({ user_id: user.id, otp, ref, action: "reset_password" })
      .first();

    if (!otpRecord) {
      return result(null, {
        success: false,
        code: 400,
        message: "OTP ‡∏´‡∏£‡∏∑‡∏≠ Reference ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        data: null,
      });
    }

    // ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà (AES-256)
    const decryptedPassword = decryptAES256(password);

    // ‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    const hashedPassword = await hashPassword(decryptedPassword);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await db("users").where({ id: user.id }).update({ password: hashedPassword });

    // ‡∏•‡∏ö OTP ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    // await db("otp").where({ id: otpRecord.id }).del();

    return result(null, {
      success: true,
      code: 200,
      message: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: null,
    });
  } catch (error: any) {
    return result(error, {
      success: false,
      code: 500,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      data: null,
    });
    throw new Error(error);
  }
};

User.verify = async (req: any, result: any) => {
  try {
    const { email, otp, ref } = req.body;

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const user = await db("users").where({ email }).first();
    if (!user) {
      return result(null, {
        success: false,
        code: 404,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
        data: null,
      });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ OTP ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const otpRecord = await db("otp")
      .where({ user_id: user.id, otp, ref, action: "user_verify" })
      .first();

    if (!otpRecord) {
      return result(null, {
        success: false,
        code: 400,
        message: "OTP ‡∏´‡∏£‡∏∑‡∏≠ Reference ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        data: null,
      });
    }

    // ‡∏•‡∏ö OTP ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    // await db("otp").where({ id: otpRecord.id }).del();

    return result(null, {
      success: true,
      code: 200,
      message: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: null,
    });
  } catch (error: any) {
    return result(error, {
      success: false,
      code: 500,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      data: null,
    });
    throw new Error(error);
  }
};

User.me = async (req: any, result: any) => {
  try {
    const { id } = req.body;
    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const user = await db("users")
      .select(
        "id",
        "name",
        "email",
        "role",
        db.raw(`? || image_url as image_url`, [url]), // ‚úÖ ‡πÉ‡∏ä‡πâ `||` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PostgreSQL
        "created_at",
        "updated_at"
      )
      .where("id", id)
      .first();

    if (!user) {
      return result.status(400).json({
        success: false,
        code: 400,
        message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        data: null,
      });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const companies = await db("user_company as uc")
      .join("company as c", "uc.company_id", "c.id")
      .where("uc.user_id", id)
      .select(
        "c.id",
        "c.name",
        "c.address",
        "c.sub_district",
        "c.district",
        "c.province",
        "c.postcode",
        "c.phone",
        "c.email",
        "created_at",
        "updated_at",
        db.raw(`? || c.image_url as image_url`, [url]) // ‚úÖ ‡πÉ‡∏ä‡πâ `||` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PostgreSQL
      );

    // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
    return result(null, {
      success: true,
      code: 200,
      message: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: { user, companies },
    });
  } catch (error: any) {
    return result(error, {
      success: false,
      code: 500,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      data: null,
    });
    throw new Error(error);
  }
};

User.logout = async (req: any, result: any) => {
  try {
    const { password } = req.headers;
    const { email } = req.body;

    result(null, true);
    // }
  } catch (error: any) {
    return result(error, {
      success: false,
      code: 500,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      data: null,
    });
    throw new Error(error);
  }
};

export default User;
